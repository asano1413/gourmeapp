datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int            @id @default(autoincrement())
  name             String
  email            String         @unique
  password         String
  createdAt        DateTime       @default(now())
  followers        Follow[]       @relation("followers")
  following        Follow[]       @relation("following")
  messagesSent     Message[]      @relation("messagesSent")
  messagesReceived Message[]      @relation("messagesReceived")
  notifications    Notification[] @relation("notifications")
  reviews          Review[]
  reviewReplies    ReviewReply[]
  ReviewLike       ReviewLike[]
}

model Follow {
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())

  follower  User @relation("followers", fields: [followerId], references: [id])
  following User @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model Message {
  id          Int      @id @default(autoincrement())
  senderId    Int
  recipientId Int
  content     String
  createdAt   DateTime @default(now())
  replyToId   Int? // 返信メッセージの場合、元のメッセージID

  sender    User      @relation("messagesSent", fields: [senderId], references: [id])
  recipient User      @relation("messagesReceived", fields: [recipientId], references: [id])
  replyTo   Message?  @relation("replies", fields: [replyToId], references: [id])
  replies   Message[] @relation("replies")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  message   String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)

  user User @relation("notifications", fields: [userId], references: [id])
}

model Store {
  id  Int   @id @default(autoincrement())
  lat Float
  lng Float

  name    String
  address String

  category     String
  openingHours String
  reviews      Review[]
}

model Review {
  id      Int   @id @default(autoincrement())
  userId  Int
  user    User  @relation(fields: [userId], references: [id])
  store   Store @relation(fields: [storeId], references: [id])
  storeId Int

  image   String
  rating  Int
  content String

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  reviewLikes   ReviewLike[]
  reviewReplies ReviewReply[]
}

model ReviewReply {
  id        Int      @id @default(autoincrement())
  reviewId  Int
  userId    Int
  content   String
  createdAt DateTime @default(now())

  review Review @relation(fields: [reviewId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model ReviewLike {
  userId    Int
  reviewId  Int
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  review Review @relation(fields: [reviewId], references: [id])

  @@id([userId, reviewId])
}

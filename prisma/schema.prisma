datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int            @id @default(autoincrement())
  name             String
  email            String         @unique
  password         String
  createdAt        DateTime       @default(now())
  likes            Like[]         @relation("UserLikes")
  followers        Follow[]       @relation("followers")
  following        Follow[]       @relation("following")
  messagesSent     Message[]      @relation("messagesSent")
  messagesReceived Message[]      @relation("messagesReceived")
  notifications    Notification[] @relation("notifications")
  posts            Post[]
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes     Like[]   @relation("PostLikes")
  userId    Int

  user User  @relation(fields: [userId], references: [id])
  tags Tag[]
}

model Like {
  id        String   @id @default(uuid())
  userId    Int
  postId    String
  createdAt DateTime @default(now())

  user User @relation("UserLikes", fields: [userId], references: [id])
  post Post @relation("PostLikes", fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

model Follow {
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())

  follower  User @relation("followers", fields: [followerId], references: [id])
  following User @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model Message {
  id          Int      @id @default(autoincrement())
  senderId    Int
  recipientId Int
  content     String
  createdAt   DateTime @default(now())
  replyToId   Int? // 返信メッセージの場合、元のメッセージID

  sender    User      @relation("messagesSent", fields: [senderId], references: [id])
  recipient User      @relation("messagesReceived", fields: [recipientId], references: [id])
  replyTo   Message?  @relation("replies", fields: [replyToId], references: [id])
  replies   Message[] @relation("replies")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  message   String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)

  user User @relation("notifications", fields: [userId], references: [id])
}
